// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2022 12:17:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] cBotoes;
reg chaveNP;
reg chaveTime;
reg clock;
reg [6:0] nSimulacao;
// wires                                               
wire buzzer;
wire [6:0] display;
wire [3:0] escolhaDisplay;
wire led;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.buzzer(buzzer),
	.cBotoes(cBotoes),
	.chaveNP(chaveNP),
	.chaveTime(chaveTime),
	.clock(clock),
	.display(display),
	.escolhaDisplay(escolhaDisplay),
	.led(led),
	.nSimulacao(nSimulacao)
);
initial 
begin 
#4096000 $finish;
end 
// cBotoes[ 2 ]
always
begin
	cBotoes[2] = 1'b0;
	cBotoes[2] = #4000 1'b1;
	#4000;
end 
// cBotoes[ 1 ]
always
begin
	cBotoes[1] = 1'b0;
	cBotoes[1] = #2000 1'b1;
	#2000;
end 
// cBotoes[ 0 ]
always
begin
	cBotoes[0] = 1'b0;
	cBotoes[0] = #1000 1'b1;
	#1000;
end 
// nSimulacao[ 6 ]
always
begin
	nSimulacao[6] = 1'b0;
	nSimulacao[6] = #512000 1'b1;
	#512000;
end 
// nSimulacao[ 5 ]
always
begin
	nSimulacao[5] = 1'b0;
	nSimulacao[5] = #256000 1'b1;
	#256000;
end 
// nSimulacao[ 4 ]
always
begin
	nSimulacao[4] = 1'b0;
	nSimulacao[4] = #128000 1'b1;
	#128000;
end 
// nSimulacao[ 3 ]
always
begin
	nSimulacao[3] = 1'b0;
	nSimulacao[3] = #64000 1'b1;
	#64000;
end 
// nSimulacao[ 2 ]
always
begin
	nSimulacao[2] = 1'b0;
	nSimulacao[2] = #32000 1'b1;
	#32000;
end 
// nSimulacao[ 1 ]
always
begin
	nSimulacao[1] = 1'b0;
	nSimulacao[1] = #16000 1'b1;
	#16000;
end 
// nSimulacao[ 0 ]
always
begin
	nSimulacao[0] = 1'b0;
	nSimulacao[0] = #8000 1'b1;
	#8000;
end 

// chaveNP
always
begin
	chaveNP = 1'b0;
	chaveNP = #1024000 1'b1;
	#1024000;
end 

// chaveTime
always
begin
	chaveTime = 1'b0;
	chaveTime = #2048000 1'b1;
	#2048000;
end 

// clock
initial
begin
	repeat(409)
	begin
		clock = 1'b0;
		clock = #5000 1'b1;
		# 5000;
	end
	clock = 1'b0;
	clock = #5000 1'b1;
end 
endmodule

