// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/22/2022 22:56:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          placarTimes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module placarTimes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chaveNP;
reg chaveTime;
reg clock;
reg clr;
reg pr;
reg [1:0] somaBTNs;
// wires                                               
wire [6:0] somaTime1;
wire [6:0] somaTime2;

// assign statements (if any)                          
placarTimes i1 (
// port map - connection between master ports and signals/registers   
	.chaveNP(chaveNP),
	.chaveTime(chaveTime),
	.clock(clock),
	.clr(clr),
	.pr(pr),
	.somaBTNs(somaBTNs),
	.somaTime1(somaTime1),
	.somaTime2(somaTime2)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// pr
initial
begin
	pr = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// chaveNP
initial
begin
	chaveNP = 1'b0;
end 

// chaveTime
initial
begin
	chaveTime = 1'b0;
	chaveTime = #320000 1'b1;
	chaveTime = #390000 1'b0;
end 
// somaBTNs[ 1 ]
initial
begin
	somaBTNs[1] = 1'b0;
end 
// somaBTNs[ 0 ]
initial
begin
	somaBTNs[0] = 1'b1;
	# 10000;
	repeat(49)
	begin
		somaBTNs[0] = 1'b0;
		somaBTNs[0] = #10000 1'b1;
		# 10000;
	end
	somaBTNs[0] = 1'b0;
end 
endmodule

