// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2022 15:49:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          registradorPontosTime
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registradorPontosTime_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] D;
reg clock;
reg clr;
reg pr;
reg validarSoma;
// wires                                               
wire [6:0] saida;

// assign statements (if any)                          
registradorPontosTime i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.clock(clock),
	.clr(clr),
	.pr(pr),
	.saida(saida),
	.validarSoma(validarSoma)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	# 5000;
	repeat(99)
	begin
		clock = 1'b0;
		clock = #5000 1'b1;
		# 5000;
	end
	clock = 1'b0;
end 

// clr
initial
begin
	repeat(12)
	begin
		clr = 1'b0;
		clr = #40000 1'b1;
		# 40000;
	end
	clr = 1'b0;
end 

// pr
initial
begin
	repeat(6)
	begin
		pr = 1'b0;
		pr = #80000 1'b1;
		# 80000;
	end
	pr = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b1;
	# 5000;
	repeat(99)
	begin
		D[6] = 1'b0;
		D[6] = #5000 1'b1;
		# 5000;
	end
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b1;
	# 10000;
	repeat(49)
	begin
		D[5] = 1'b0;
		D[5] = #10000 1'b1;
		# 10000;
	end
	D[5] = 1'b0;
end 
// D[ 4 ]
always
begin
	D[4] = 1'b0;
	D[4] = #20000 1'b1;
	#20000;
end 
// D[ 3 ]
initial
begin
	repeat(12)
	begin
		D[3] = 1'b0;
		D[3] = #40000 1'b1;
		# 40000;
	end
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	repeat(8)
	begin
		D[2] = 1'b0;
		D[2] = #60000 1'b1;
		# 60000;
	end
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b1;
	# 160000;
	repeat(2)
	begin
		D[1] = 1'b0;
		D[1] = #160000 1'b1;
		# 160000;
	end
	D[1] = 1'b0;
	D[1] = #160000 1'b1;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b1;
	D[0] = #320000 1'b0;
	D[0] = #320000 1'b1;
	D[0] = #320000 1'b0;
end 
endmodule

