// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2022 16:15:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cronometroRegressivo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cronometroRegressivo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chaveEscolherCronometro;
reg chaveParar;
reg clock_in;
reg resetNumero;
// wires                                               
wire buzzer;
wire [4:0] saida;

// assign statements (if any)                          
cronometroRegressivo i1 (
// port map - connection between master ports and signals/registers   
	.buzzer(buzzer),
	.chaveEscolherCronometro(chaveEscolherCronometro),
	.chaveParar(chaveParar),
	.clock_in(clock_in),
	.resetNumero(resetNumero),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// clock_in
always
begin
	clock_in = 1'b0;
	clock_in = #5000 1'b1;
	#5000;
end 

// chaveEscolherCronometro
initial
begin
	repeat(6)
	begin
		chaveEscolherCronometro = 1'b0;
		chaveEscolherCronometro = #80000 1'b1;
		# 80000;
	end
	chaveEscolherCronometro = 1'b0;
end 

// chaveParar
initial
begin
	chaveParar = 1'b0;
end 

// resetNumero
initial
begin
	resetNumero = 1'b0;
end 
endmodule

